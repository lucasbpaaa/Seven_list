#Question 1:

def find_judge(n, trust):
    if n == 1:
        return 1 #Se só há uma pessoa, ela é automaticamnte juiz.
    
    confia = [0]*(n+1)
    confiado = [0]*(n+1)
    for ai, bi in trust:
        confia[ai] += 1
        confiado[bi] += 1

    for i in range(1, n + 1):
        if confia[i] == 0 and confiado[i] == n - 1:
            return i
    return -1



''''

Exemplo, caso queira:
n = 4
trust = [[ 1 , 3 ], [ 2 , 3 ], [ 3 , 1 ], [3, 4], [1, 4], [2, 4]]
print(find_judge(n, trust)) 

'''

#Question 2:

#Item a:

import math

def euclidean_distance(p1, p2):
    return math.sqrt((p2[0] - p1[0])**2 + (p2[1] - p1[1])**2)

# Função para encontrar o representante de um conjunto no Union-Find
def find(parent, i):
    if parent[i] == i:
        return i
    else:
        parent[i] = find(parent, parent[i])  # Path compression
        return parent[i]

# Função para unir dois conjuntos no Union-Find
def union(parent, rank, x, y):
    rootX = find(parent, x)
    rootY = find(parent, y)
    
    if rootX != rootY:
        if rank[rootX] > rank[rootY]:
            parent[rootY] = rootX
        elif rank[rootX] < rank[rootY]:
            parent[rootX] = rootY
        else:
            parent[rootY] = rootX
            rank[rootX] += 1

# Algoritmo de Kruskal para encontrar a Árvore Geradora Mínima (MST)
def kruskal(vertices):
    n = len(vertices)
    edges = []
    
    # Calculando todas as arestas com as respectivas distâncias
    for i in range(n):
        for j in range(i + 1, n):
            distance = euclidean_distance(vertices[i], vertices[j])
            edges.append((distance, i, j))  # (peso, vértice1, vértice2)
    
    # Ordenando as arestas pela distância
    edges.sort()
    
    # Inicializando a estrutura Union-Find
    parent = list(range(n))
    rank = [0] * n
    
    mst = []  # Lista de arestas que formarão a MST
    mst_cost = 0  # Custo total da MST
    
    # Iterando sobre as arestas, e unindo os conjuntos disjuntos
    for weight, u, v in edges:
        root_u = find(parent, u)
        root_v = find(parent, v)
        
        # Se u e v não estão no mesmo conjunto, unimos e adicionamos a aresta na MST
        if root_u != root_v:
            mst.append((u, v, weight))
            mst_cost += weight
            union(parent, rank, root_u, root_v)
    
    return mst_cost, mst

''''

Exemplo, caso queira:
vertices = [(0, 0), (1, 2), (4, 3), (5, 1), (2, 5)]  # Vértices no plano (x, y)

# Encontrando a Árvore Geradora Mínima (MST)
mst_cost, mst = kruskal(vertices)

print(f"Custo total da MST: {mst_cost}")
print("Arestas da MST (vértices conectados e distâncias):")
for u, v, weight in mst:
    print(f"Vértice {u} - Vértice {v} com distância {weight:.2f}")
'''

#Item b:
''''
    A complexidade mínima de qualquer algoritmo que resolve o problema de Árvore Geradora Mínima (MST) é Ω(nlog n), pois, em um grafo com 
n vértices, o algoritmo precisa, no mínimo, realizar operações que envolvem as distâncias entre os vértices. 
No pior caso, ao selecionar as arestas de menor peso, um algoritmo eficiente como o de Prim (que utiliza uma fila de prioridade)
ou Kruskal (que ordena as arestas) precisa manipular informações para cada vértice e aresta.
    No caso de Prim, por exemplo, é necessário extrair o vértice de menor peso da fila de prioridade, o que tem complexidade 
O(logn) por operação, e isso ocorre para cada um dos n vértices. Por isso,
a complexidade mínima de um algoritmo para MST, independentemente do número de arestas, é Ω(nlog n), 
já que é necessário, pelo menos, processar cada vértice em tempo logarítmico para garantir a formação da árvore geradora mínima.
'''

#Item c:
''''
O algoritmo acima não é tão conveniente para todo tipo de grafo, como os esparsos. Concluímos que o algoritmo não é
ótimo para todo caso.
'''

#Question 3:

import copy

''''
    Para n+1 pontos, temos um único polinômio de grau n que aproxima bem uma curva que passa pelos pontos. Esse 
polinômio é o interpolador de lagrange. Usaremos ele.

'''

def lagrange(T_fT, alvo, invert=False):  
    
    # Carregaremos invert, que caso for True => que queremos a relação altura x grau
    sum = 0

    T_fT = copy.deepcopy(T_fT)
    if invert:
        for T in T_fT:
            T[0], T[1] = T[1], T[0]

    for T in T_fT:
        a = 1
        for T2 in T_fT:
            if T != T2:
                a *= (alvo - T2[0]) / (T[0] - T2[0])

        sum += a * T[1]

    return sum

''''
Use, caso queira:

T_fT = ([15, 200], [9, 400], [5, 600], [3, 800], [-2, 1000], [-5, 1200], [-15, 1400])

print(f'A altura do avião a 0 graus Celsius é: {lagrange(T_fT, 0)}')
print(f'A temperatura do avião a 700 metros é: {lagrange(T_fT, 700, True)}')
'''

#Question 4:

from typing import Any
import numpy as np

    
class Domain:
    min = None
    max = None

    def __contains__(self, x):
        raise NotImplementedError
    
    def __repr__(self):
        raise NotImplementedError

    def __str__(self):
        return self.__repr__()
    
    def copy(self):
        raise NotImplementedError 


class Interval(Domain):
    def __init__(self, p1, p2):
        self.inff, self.supp = min(p1, p2), max(p1, p2)
    
    @property
    def min(self):
        return self.inff

    @property
    def max(self):
        return self.supp
    
    @property
    def size(self):
        return (self.max - self.min)
    
    @property
    def haf(self):
        return (self.max + self.min)/2.0
    
    def __contains__(self, x):
        return  np.all(np.logical_and(self.inff <= x, x <= self.supp))

    def __str__(self):
        return f'[{self.inff:2.4f}, {self.supp:2.4f}]' 

    def __repr__(self):
        return f'[{self.inff!r:2.4f}, {self.supp!r:2.4f}]'
    
    def copy(self):
        return Interval(self.inff, self.supp)


class RealFunction:
    f = None
    prime = None
    domain = None
    
    def eval_safe(self, x):
        if self.domain is None or x in self.domain:
            return self.f(x)
        else:
            raise Exception("The number is out of the domain")

    def prime_safe(self, x):
        if self.domain is None or x in self.domain:
            return self.prime(x)
        else:
            raise Exception("The number is out of the domain")
        
    def __call__(self, x) -> float:
        return self.eval_safe(x)
    
    def plot(self):
        fig, ax = plt.subplots()
        X = np.linspace(self.domain.min, self.domain.max, 100)
        Y = self(X)
        ax.plot(X, Y)
        return fig, ax


def bissect(f: RealFunction, 
            search_space: Interval, 
            erroTol: float = 1e-4, 
            maxItr: int = 1e4, 
            eps: float = 1e-6 ) -> Interval:
    count = 0
    ss = search_space.copy()
    err = ss.size/2.0
    fa, fb = f(ss.min), f(ss.max)
    if fa * fb > -eps:
        if abs(fa) < eps:
            return Interval(ss.min, ss.min)
        elif abs(fb) < eps:
            return Interval(ss.max, ss.max)
        else:
            raise Exception("The interval extremes share the same signal;\n employ the grid search method to locate a valid interval.")
    while count <= maxItr and err > erroTol:
        count += 1
        a, b, m =  ss.min, ss.max, ss.haf
        fa, fb, fm = f(a), f(b), f(m)
        if abs(fm) < eps:
            return Interval(m, m)
        elif fa * fm < -eps:
            ss = Interval(a, m)
        elif fb * fm < -eps:
            ss = Interval(m, b)
    return ss


def grid_search(f: RealFunction, domain: Interval = None, grid_freq = 8) -> Interval:
    if domain is not None:
        D = domain.copy()
    else:
        D = f.domain.copy()
    L1 = np.linspace(D.min, D.max, grid_freq)
    FL1 = f(L1)
    TI = FL1[:-1]*FL1[1:]
    VI = TI <= 0
    if not np.any(VI):
        return None
    idx = np.argmax(VI)
    return Interval(L1[idx], L1[idx+1])


def newton_root(f: RealFunction, 
                x0: float, 
                erroTol: float = 1e-4, 
                maxItr: int = 1e4, 
                eps: float = 1e-6) -> float:
    """
    Método de Newton para encontrar a raiz de uma função real.
    """
    count = 0
    x = x0
    while count <= maxItr:
        fx = f(x)
        fpx = f.prime(x)
        if abs(fx) < erroTol:  # condição de parada
            return x
        if abs(fpx) < eps:  # evita divisão por zero
            raise Exception(f"A derivada é zero em x = {x}. O método de Newton falhou.")
        x = x - fx / fpx
        count += 1
    raise Exception(f"Máximo de iterações atingido. Raiz não encontrada com tolerância {erroTol}")


# Exemplo,caso queira:

if __name__ == '__main__':
    # Definindo o intervalo para a busca
    d = Interval(-2.0, 2.0)
    print("Intervalo:", d)

    # Testando se alguns valores estão dentro do intervalo
    nt = np.linspace(d.min-.1, d.max+1, 5)
    for n in nt:
        sts = 'IN' if n in d else 'OUT'
        print(f'{n} is {sts} of {d}')

    # Definindo uma função de teste
    class funcTest(RealFunction):
        f = lambda self, x: np.power(x, 3) - x - 2  # f(x) = x^3 - x - 2
        prime = lambda self, x: 3 * x**2 - 1  # f'(x) = 3x^2 - 1
        domain = Interval(-2, 2)

    ft = funcTest()

    # Realizando uma busca de grade para encontrar um intervalo inicial para o método da bisseção
    ND = grid_search(ft, grid_freq=12)
    print("Intervalo encontrado pela busca de grade:", ND)

    # Encontrando a raiz utilizando o método da bisseção
    raiz_bissect = bissect(ft, search_space=ND)
    print("Raiz encontrada pela bisseção:", raiz_bissect)

    # Encontrando a raiz utilizando o método de Newton
    raiz_newton = newton_root(ft, x0=1.5)  # Chute inicial 1.5
    print("Raiz encontrada pelo método de Newton:", raiz_newton)


#Question 5:

import numpy as np
import scipy.interpolate
import time



class interpolater:
    def evaluate(self, X):
        raise NotImplementedError

    def __call__(self, X):
        return self.evaluate(X)


class VandermondeMatrix(interpolater):
    def __init__(self, x, y):
        if len(x) != len(y):
            raise RuntimeError(f"Dimensions must be equal len(x) = {len(x)} != len(y) = {len(y)}")
        self.data = [x, y]
        self._degree = len(x) - 1
        self._buildMatrix()
        self._poly = np.linalg.solve(self.matrix, self.data[1])

    def _buildMatrix(self):
        self.matrix = np.ones([self._degree + 1, self._degree + 1])
        for i, x in enumerate(self.data[0]):
            self.matrix[i, 1:] = np.multiply.accumulate(np.repeat(x, self._degree))

    def evaluate(self, X):
        r = 0.0
        for c in self._poly[::-1]:
            r = c + r * X
        return r


class LagrangeInterpolator(interpolater):
    def __init__(self, x, y):
        if len(x) != len(y):
            raise RuntimeError(f"Dimensions must be equal len(x) = {len(x)} != len(y) = {len(y)}")
        self.x = np.array(x)
        self.y = np.array(y)
        self._poly = scipy.interpolate.lagrange(self.x, self.y)

    def evaluate(self, X):
        return self._poly(X)


def random_sample(intv, N):
    r = np.random.uniform(intv[0], intv[1], N - 2)
    r.sort()
    return np.array([intv[0]] + list(r) + [intv[1]])


def error_pol(f, P, intv, n=1000):
    x = random_sample(intv, n)
    vectError = np.abs(f(x) - P(x))
    return np.sum(vectError) / n, np.max(vectError)


# Função para medir o tempo de construção do polinômio
def measure_time(interpolator_class, x, y):
    start_time = time.time()
    interpolator = interpolator_class(x, y)
    elapsed_time = time.time() - start_time
    return elapsed_time


# Exemplo de uso para comparar tempos
if __name__ == '__main__':
    # Dados de exemplo
    DataX = [10.7, 11.075, 11.45, 11.825, 12.2, 12.5]
    DataY = [-0.25991903, 0.04625002, 0.16592075, 0.13048074, 0.13902777, 0.2]

    # Medindo o tempo de construção para VandermondeMatrix
    time_vandermonde = measure_time(VandermondeMatrix, DataX, DataY)
    print(f"Tempo de construção (VandermondeMatrix): {time_vandermonde:.6f} segundos")

    # Medindo o tempo de construção para LagrangeInterpolator
    time_lagrange = measure_time(LagrangeInterpolator, DataX, DataY)
    print(f"Tempo de construção (LagrangeInterpolator): {time_lagrange:.6f} segundos")

    # Comparando os polinômios
    Pvm = VandermondeMatrix(DataX, DataY)
    Plagrange = LagrangeInterpolator(DataX, DataY)

    # Gerando pontos para avaliação
    X = np.linspace(min(DataX) - 0.2, max(DataX) + 0.2, 100)
    Y_vandermonde = Pvm(X)
    Y_lagrange = Plagrange(X)
